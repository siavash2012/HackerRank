import java.io.*;
import java.util.*;


class Student {
    String name;
    double CGPA;
    int id;
    public Student(String name, double CGPA, int id){
        this.name=name;
        this.CGPA=CGPA;
        this.id=id;
    }
    public Integer id(){
        return this.id;
    }
    public Double CGPA(){
        return this.CGPA;
    }
    public String name(){
        return this.name;
    }
    public String toString(){
        return this.name;
    }
}
public class Solution {
    
    static class Priorities{
        
        Comparator<Student> comparator=Comparator.comparing(Student::CGPA).reversed().thenComparing(Student::name).thenComparing(Student::id);
       
        PriorityQueue<Student> priorityQueue = new PriorityQueue<Student>(comparator);
        
        List<Student> studentList=new ArrayList<Student>();
        
        List<Student> getStudents(List<String>events){
            
            for(var event:events){
                if(event.equals("ENTER")){
                    priorityQueue.offer(studentList.remove(0));
                }else if(event.equals("SERVED")){
                    priorityQueue.poll();
                }
            }
            ArrayList<Student>result=new ArrayList<>();
            while(! priorityQueue.isEmpty()){
                result.add(priorityQueue.poll());
            }
            return result;
        }
        
    }

    public static void main(String[] args) throws Exception {
        var priorities=new Priorities();
        var events=new ArrayList<String>();
        var reader=new BufferedReader(new InputStreamReader(System.in));
        reader.readLine();
        while(reader.ready()){
            var line=reader.readLine();
            var array=line.split(" ");
            events.add(array[0].strip());
            if(array.length==4){
                var student= new Student(array[1].strip(),Double.valueOf(array[2].strip()),Integer.valueOf(array[3].strip()));
            priorities.studentList.add(student);
            }
            
        }
        var result=priorities.getStudents(events);
        if(result.isEmpty()){
            System.out.println("EMPTY");
        }else{
        result.forEach(System.out::println);
        }
    }
}
