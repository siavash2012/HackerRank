import java.util.ArrayList;
import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

enum Color {
    RED, GREEN
}

abstract class Tree {

    private int value;
    private Color color;
    private int depth;

    public Tree(int value, Color color, int depth) {
        this.value = value;
        this.color = color;
        this.depth = depth;
    }

    public int getValue() {
        return value;
    }

    public Color getColor() {
        return color;
    }

    public int getDepth() {
        return depth;
    }

    public abstract void accept(TreeVis visitor);
    public String toString(){
        return this.value+" "+this.color+" "+this.depth;
    }
}

class TreeNode extends Tree {

    private ArrayList<Tree> children = new ArrayList<>();

    public TreeNode(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitNode(this);

        for (Tree child : children) {
            child.accept(visitor);
        }
    }

    public void addChild(Tree child) {
        children.add(child);
    }
    public String toString(){
        return super.toString() + "children " +children;
    }
}

class TreeLeaf extends Tree {

    public TreeLeaf(int value, Color color, int depth) {
        super(value, color, depth);
    }

    public void accept(TreeVis visitor) {
        visitor.visitLeaf(this);
    }
}

abstract class TreeVis
{
    public abstract int getResult();
    public abstract void visitNode(TreeNode node);
    public abstract void visitLeaf(TreeLeaf leaf);

}

class SumInLeavesVisitor extends TreeVis {
    int sumInLeaves;
    public int getResult() {
        //implement this
        return sumInLeaves;
    }

    public void visitNode(TreeNode node) {
        //implement this
        if(node.getDepth()==0) {
            sumInLeaves = 0;
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
        sumInLeaves+=leaf.getValue();
    }
}

class ProductOfRedNodesVisitor extends TreeVis {

    long productOfRedNodes=1;
    private final int modulo = 1000000007;

    public int getResult() {
        //implement this
        return (int)productOfRedNodes;
    }

    public void visitNode(TreeNode node) {
        //implement this
        if(node.getDepth()==0) {
            productOfRedNodes = 1;
        }
        if(node.getColor().equals(Color.RED)){
            if(node.getValue() !=0) {
                productOfRedNodes= (productOfRedNodes * node.getValue()) % modulo;
            }
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
        //implement this
        if(leaf.getColor().equals(Color.RED)){
            if(leaf.getValue()!=0) {
                productOfRedNodes= (productOfRedNodes * leaf.getValue()) % modulo;
            }
        }
    }
}

class FancyVisitor extends TreeVis {

    int sumOfNonLeafNodesAtEvenDepths;
    int sumOfGreenLeafNodes;
    public int getResult() {
        //implement this
        return Math.abs(sumOfNonLeafNodesAtEvenDepths-sumOfGreenLeafNodes);
    }

    public void visitNode(TreeNode node) {
        //implement this
        if(node.getDepth()==0){
            sumOfNonLeafNodesAtEvenDepths=0;
            sumOfGreenLeafNodes=0;
        }
        if(node.getDepth() % 2 == 0){
            sumOfNonLeafNodesAtEvenDepths += node.getValue();
        }
    }

    public void visitLeaf(TreeLeaf leaf) {
        //implement this
        if(leaf.getColor().equals(Color.GREEN)){
            sumOfGreenLeafNodes+=leaf.getValue();
        }
    }
}

public class VisitorPattern{

    public static void putMap(Map<Integer,List<Integer>> map, Integer key, Integer value){
        map.computeIfPresent(key, (k, v) -> {
            v.add(value);
            return v;
        });
        map.computeIfAbsent(key, k -> new ArrayList<>(List.of(value)));
    }

    public static Tree solve() throws Exception {
        //read the tree from STDIN and return its root as a return value of this function
        var reader = new BufferedReader(new InputStreamReader(System.in));
        var numberOfNodes = Integer.valueOf(reader.readLine().strip());
        var values = Arrays.stream(reader.readLine().split(" ")).map(String::strip).map(Integer::valueOf).collect(Collectors.toList());
        var colors = Arrays.stream(reader.readLine().split(" ")).map(String::strip).map(Integer::valueOf).map(
                a -> {
                    if (a == 0) {
                        return Color.RED;
                    } else {
                        return Color.GREEN;
                    }
                }
        ).collect(Collectors.toList());


        Map<Integer,List<Integer>> testMap=new HashMap<>();

        while (reader.ready()) {
            var array = Arrays.stream(reader.readLine().split(" ")).map(String::strip).mapToInt(Integer::valueOf).toArray();
            putMap(testMap,array[0],array[1]);
            putMap(testMap,array[1],array[0]);
        }
        
        List<List<Integer>> treeList=new ArrayList<>();
        Map<Integer,List<Integer>> parentChildMap=new TreeMap<>();
        Map<Integer,Integer> nodeDepthMap=new TreeMap<>();
        var index=1;
        treeList.add(List.of(1));
        nodeDepthMap.put(1,0);
        var parentSet=new HashSet<Integer>();

        while(nodeDepthMap.size() != numberOfNodes){
            var levelList=new ArrayList<Integer>();
            for(var node:treeList.get(index-1)){
                int finalIndex = index;
                parentSet.add(node);
                testMap.get(node).stream().filter(a-> !parentSet.contains(a)).forEach(
                        a->{
                            levelList.add(a);
                            putMap(parentChildMap,node,a);
                            nodeDepthMap.put(a, finalIndex);
                        }
                );
            }
            treeList.add(levelList);
            ++index;
        }

        var labelNodeMap=new HashMap<Integer,Tree>();
        for(int i=1;i<=numberOfNodes;++i){
            if(parentChildMap.get(i)==null){
                labelNodeMap.put(i,new TreeLeaf(values.get(i-1),colors.get(i-1),nodeDepthMap.get(i)));
            }else{
                labelNodeMap.put(i,new TreeNode(values.get(i-1),colors.get(i-1),nodeDepthMap.get(i)));
            }
        }

        for(var entry:parentChildMap.entrySet()){
            for(var child:entry.getValue()){
                ((TreeNode)labelNodeMap.get(entry.getKey())).addChild(labelNodeMap.get(child));
            }
        }

        return labelNodeMap.get(1);
    }



    public static void main(String[] args) throws Exception {
        Tree root = solve();
        SumInLeavesVisitor vis1 = new SumInLeavesVisitor();
        ProductOfRedNodesVisitor vis2 = new ProductOfRedNodesVisitor();
        FancyVisitor vis3 = new FancyVisitor();

        root.accept(vis1);
        root.accept(vis2);
        root.accept(vis3);

        int res1 = vis1.getResult();
        int res2 = vis2.getResult();
        int res3 = vis3.getResult();


        System.out.println(res1);
        System.out.println(res2);
        System.out.println(res3);
    }
}
